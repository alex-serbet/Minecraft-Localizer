<Window Width="1000" Height="650" MinWidth="700" MinHeight="300"
    x:Class="MinecraftLocalizer.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Converters="clr-namespace:MinecraftLocalizer.Converters"
    xmlns:Models="clr-namespace:MinecraftLocalizer.Models"
    xmlns:Properties="clr-namespace:MinecraftLocalizer.Properties"
    xmlns:ViewModels="clr-namespace:MinecraftLocalizer.ViewModels"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Title="Minecraft Localizer"
    ResizeMode="CanResizeWithGrip"
    WindowStartupLocation="CenterScreen">

    <!--  Используем EventToCommand для привязки события Closing к команде  -->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding OnApplicationExitCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.DataContext>
        <ViewModels:MainViewModel />
    </Window.DataContext>

    <Window.Resources>
        <ResourceDictionary>
            <!--  Converters  -->
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

            <Converters:ChildrenToVisibilityConverter x:Key="ChildrenToVisibilityConverter" />
            <Converters:NoChildrenToVisibilityConverter x:Key="NoChildrenToVisibilityConverter" />
            <Converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <Converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />

            <!--  Styles  -->
            <Style x:Key="CenteredTextBlockStyle" TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>


            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Styles/DataGridStyles.xaml" />
                <ResourceDictionary Source="/Styles/ToolBarStyles.xaml" />

            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <!--  Toolbar  -->
            <RowDefinition Height="35" />
            <!--  Search/Control panel  -->
            <RowDefinition Height="*" />
            <!--  Main content  -->
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.3*" MinWidth="200" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" MinWidth="550" />
        </Grid.ColumnDefinitions>

        <!--  Toolbar  -->
        <Border
            Grid.ColumnSpan="3"
            BorderBrush="#F2F2F2"
            BorderThickness="0,0,0,2">
            <ToolBarTray Background="Transparent" Orientation="Horizontal">
                <ToolBar Style="{StaticResource ToolBarStyle}" Background="Transparent">
                    <Menu Height="25" Background="Transparent">
                        <MenuItem Header="{x:Static Properties:Resources.File}" Margin="10,1,0,0">
                            <MenuItem Header="{x:Static Properties:Resources.OpenFile}" />
                            <MenuItem Header="{x:Static Properties:Resources.OpenDirectory}" />
                            <MenuItem Header="{x:Static Properties:Resources.SaveTranslate}" Command="{Binding SaveTranslationCommand}" />
                            <Separator />
                            <MenuItem Header="{x:Static Properties:Resources.Exit}" />
                        </MenuItem>

                        <MenuItem Margin="0,2,0,0"
                            Header="{x:Static Properties:Resources.Settings}"
                            BorderThickness="0"
                            Command="{Binding OpenSettingsCommand}" />

                        <MenuItem Margin="0,2,0,0"
                            Header="{x:Static Properties:Resources.About}"
                            BorderThickness="0" />
                    </Menu>
                </ToolBar>
            </ToolBarTray>
        </Border>

        <!--  Search and Controls  -->
        <TextBox x:Name="SearchTreeView" Margin="10,10,0,0" Grid.Row="1" Grid.Column="0"
            Text="{Binding SearchTreeViewText, UpdateSourceTrigger=PropertyChanged}"
            Padding="3" />

        <StackPanel Margin="0,10,10,0" Grid.Row="1" Grid.Column="2"
            HorizontalAlignment="Right"
            Orientation="Horizontal">


            <Button Margin="0,0,20,0" Width="120"
                Content="Убить процесс"
                Command="{Binding OnApplicationExitCommand}" />


            <Button Margin="0,0,20,0" Width="120"
                Content="{Binding TranslationButtonText}"
                Command="{Binding TranslateCommand}" />

            <TextBox x:Name="SearchDataGrid" Width="150"
                Text="{Binding SearchDataGridText, UpdateSourceTrigger=PropertyChanged}"
                Padding="3" />
        </StackPanel>

        <StackPanel Margin="0,10,0,0" Grid.Row="1" Grid.Column="2"
            HorizontalAlignment="Left"
            Orientation="Horizontal">

            <Label Content="{x:Static Properties:Resources.TranslationMode}" />

            <ComboBox x:Name="ModComboBox" Width="130"
                DisplayMemberPath="ModeTitle"
                ItemsSource="{Binding Modes}"
                SelectedItem="{Binding SelectedMode, Mode=TwoWay}" />

            <Label x:Name="TranslateProgress" Margin="20,0,0,0"
                Content="{Binding TranslationProgress}"
                Visibility="{Binding IsTranslationInProgress, Converter={StaticResource BooleanToVisibilityConverter}}" />
        </StackPanel>

        <!--  TreeView  -->
        <TreeView Margin="10,10,0,10" Grid.Row="2" Grid.Column="0"
            ItemsSource="{Binding TreeNodesCollectionView}"
            VirtualizingPanel.IsVirtualizing="True"
            VirtualizingPanel.VirtualizationMode="Recycling">

            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <i:InvokeCommandAction Command="{Binding OnTreeViewItemSelectedCommand}" CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=TreeView}}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <TreeView.Resources>
                <HierarchicalDataTemplate DataType="{x:Type Models:TreeNodeItem}" ItemsSource="{Binding ChildrenNodes}">
                    <StackPanel Orientation="Horizontal">
                        <CheckBox
                            Content="{Binding ModName}"
                            IsChecked="{Binding IsChecked}"
                            Visibility="{Binding ChildrenNodes, Converter={StaticResource ChildrenToVisibilityConverter}}" />
                        <TextBlock Text="{Binding FileName}" Margin="5,0,0,0" />
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.Resources>
        </TreeView>

        <!--  GridSplitter  -->
        <GridSplitter Grid.Row="2" Grid.Column="1" Width="5"
            HorizontalAlignment="Stretch"
            Background="Transparent" />

        <!--  DataGrid  -->
        <DataGrid x:Name="LocalizationDataGrid" Margin="0,10,10,10" Grid.Row="2" Grid.Column="2"
            AlternationCount="2"
            AutoGenerateColumns="False"
            CanUserAddRows="False"
            EnableRowVirtualization="True"
            HeadersVisibility="Column"
            ItemsSource="{Binding DataGridCollectionView}"
            VirtualizingPanel.VirtualizationMode="Recycling">

            <DataGrid.Columns>
                <DataGridTemplateColumn Width="20" CanUserResize="False">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsSelected, UpdateSourceTrigger=PropertyChanged}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTextColumn Width="*"
                    Header="ID"
                    Binding="{Binding ID}" />

                <DataGridTextColumn Width="*"
                    Header="{x:Static Properties:Resources.OriginalText}"
                    Binding="{Binding OriginalString, UpdateSourceTrigger=PropertyChanged}">
                    <DataGridTextColumn.ElementStyle>
                        <Style BasedOn="{StaticResource CenteredTextBlockStyle}" TargetType="TextBlock">
                            <Setter Property="TextWrapping" Value="Wrap" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Width="*"
                    Header="{x:Static Properties:Resources.TranslatedText}"
                    Binding="{Binding TranslatedString, UpdateSourceTrigger=PropertyChanged}">
                    <DataGridTextColumn.ElementStyle>
                        <Style BasedOn="{StaticResource CenteredTextBlockStyle}" TargetType="TextBlock">
                            <Setter Property="TextWrapping" Value="Wrap" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>